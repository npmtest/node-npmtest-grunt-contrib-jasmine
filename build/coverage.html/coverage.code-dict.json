{"/home/travis/build/npmtest/node-npmtest-grunt-contrib-jasmine/test.js":"/* istanbul instrument in package npmtest_grunt_contrib_jasmine */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-contrib-jasmine/lib.npmtest_grunt_contrib_jasmine.js":"/* istanbul instrument in package npmtest_grunt_contrib_jasmine */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_contrib_jasmine = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_contrib_jasmine = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-contrib-jasmine/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-contrib-jasmine && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_contrib_jasmine */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_contrib_jasmine\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_contrib_jasmine.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_contrib_jasmine.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_contrib_jasmine.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_contrib_jasmine.__dirname + '/lib.npmtest_grunt_contrib_jasmine.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-contrib-jasmine/node_modules/grunt-contrib-jasmine/tasks/jasmine.js":"/*\n * grunt-contrib-jasmine\n * http://gruntjs.com/\n *\n * Copyright (c) 2016 GruntJS Team\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function(grunt) {\n\n  // node api\n  var fs = require('fs'),\n      path = require('path'),\n      sprintf = require('sprintf-js').sprintf;\n\n  // npm lib\n  var phantomjs = require('grunt-lib-phantomjs').init(grunt),\n      chalk = require('chalk'),\n      _ = require('lodash');\n\n  // local lib\n  var jasmine = require('./lib/jasmine').init(grunt, phantomjs);\n\n  var junitTemplate = path.join(__dirname, '/jasmine/templates/JUnit.tmpl');\n\n  var status = {};\n\n  var symbols = {\n    none: {\n      check: '',\n      error: '',\n      splat: ''\n    },\n    short: {\n      check: '.',\n      error: 'X',\n      splat: '*'\n    },\n    full: {\n      check: '✓',\n      error: 'X',\n      splat: '*'\n    }\n  };\n\n  // With node.js on Windows: use symbols available in terminal default fonts\n  // https://github.com/visionmedia/mocha/pull/641\n  if (process && process.platform === 'win32') {\n    symbols = {\n      none: {\n        check: '',\n        error: '',\n        splat: ''\n      },\n      short: {\n        check: '.',\n        error: '\\u00D7',\n        splat: '*'\n      },\n      full: {\n        check: '\\u221A',\n        error: '\\u00D7',\n        splat: '*'\n      }\n    };\n  }\n\n  grunt.registerMultiTask('jasmine', 'Run Jasmine specs headlessly through PhantomJS.', function() {\n\n    // Merge task-specific options with these defaults.\n    var options = this.options({\n      version: '2.2.0',\n      timeout: 10000,\n      styles: [],\n      specs: [],\n      helpers: [],\n      vendor: [],\n      polyfills: [],\n      customBootFile: null,\n      tempDir: '.grunt/grunt-contrib-jasmine',\n      outfile: '_SpecRunner.html',\n      host: '',\n      template: path.join(__dirname, '/jasmine/templates/DefaultRunner.tmpl'),\n      templateOptions: {},\n      junit: {},\n      ignoreEmpty: grunt.option('force') === true,\n      display: 'full',\n      summary: false\n    });\n\n    if (grunt.option('debug')) {\n      grunt.log.debug(options);\n    }\n\n    setup(options);\n\n    // The filter returned no spec files so skip phantom.\n    if (!jasmine.buildSpecrunner(this.filesSrc, options)) {\n      return removePhantomListeners();\n    }\n\n    // If we're just building (e.g. for web), skip phantom.\n    if (this.flags.build) {\n      removePhantomListeners();\n      return;\n    }\n\n    var done = this.async();\n    phantomRunner(options, function(err, status) {\n      var success = !err && status.failed === 0;\n\n      if (err) {\n        grunt.log.error(err);\n      }\n      if (status.failed === 0) {\n        grunt.log.ok('0 failures');\n      } else {\n        grunt.log.error(status.failed + ' failures');\n      }\n\n      teardown(options, function() {\n        done(success);\n      });\n    });\n\n  });\n\n  function phantomRunner(options, cb) {\n    var file = options.outfile;\n\n    if (options.host) {\n      if (!(/\\/$/).test(options.host)) {\n        options.host += '/';\n      }\n      file = options.host + options.outfile;\n    }\n\n    grunt.verbose.subhead('Testing Jasmine specs via PhantomJS').or.writeln('Testing Jasmine specs via PhantomJS');\n    grunt.log.writeln('');\n\n    phantomjs.spawn(file, {\n      failCode: 90,\n      options: options,\n      done: function(err) {\n        cb(err, status);\n      }\n    });\n  }\n\n  function teardown(options, cb) {\n    removePhantomListeners();\n\n    if (!options.keepRunner && fs.statSync(options.outfile).isFile()) {\n      fs.unlink(options.outfile);\n    }\n\n    if (!options.keepRunner) {\n      jasmine.cleanTemp(options.tempDir, cb);\n    } else {\n      cb();\n    }\n  }\n\n  function removePhantomListeners() {\n    phantomjs.removeAllListeners();\n    phantomjs.listenersAny().length = 0;\n  }\n\n  function setup(options) {\n    var indentLevel = 1,\n        tabstop = 2,\n        thisRun = {},\n        suites = {},\n        currentSuite;\n\n    status = {\n      failed: 0\n    };\n\n    function indent(times) {\n      return new Array(+times * tabstop).join(' ');\n    }\n\n    phantomjs.on('fail.load', function() {\n      grunt.log.writeln();\n      grunt.warn('PhantomJS failed to load your page.', 90);\n    });\n\n    phantomjs.on('fail.timeout', function() {\n      grunt.log.writeln();\n      grunt.warn('PhantomJS timed out, possibly due to an unfinished async spec.', 90);\n    });\n\n    phantomjs.on('console', function(msg) {\n      thisRun.cleanConsole = false;\n      if (options.display === 'full') {\n        grunt.log.writeln('\\n' + chalk.yellow('log: ') + msg);\n      }\n    });\n\n    phantomjs.on('error.onError', function(string, trace) {\n      if (trace && trace.length) {\n        grunt.log.error(chalk.red(string) + ' at ');\n        trace.forEach(function(line) {\n          var file = line.file.replace(/^file:/, '');\n          var message = sprintf('%s:%d %s', path.relative('.', file), line.line, line.function);\n          grunt.log.error(chalk.red(message));\n        });\n      } else {\n        grunt.log.error('Error caught from PhantomJS. More info can be found by opening the Spec Runner in a browser.');\n        grunt.warn(string);\n      }\n    });\n\n    phantomjs.onAny(function() {\n      var args = [this.event].concat(grunt.util.toArray(arguments));\n      grunt.event.emit.apply(grunt.event, args);\n    });\n\n    phantomjs.on('jasmine.jasmineStarted', function() {\n      grunt.verbose.writeln('Jasmine Runner Starting...');\n      thisRun.startTime = (new Date()).getTime();\n      thisRun.executedSpecs = 0;\n      thisRun.passedSpecs = 0;\n      thisRun.failedSpecs = 0;\n      thisRun.skippedSpecs = 0;\n      thisRun.summary = [];\n    });\n\n    phantomjs.on('jasmine.suiteStarted', function(suiteMetaData) {\n      currentSuite = suiteMetaData.id;\n      suites[currentSuite] = {\n        name: suiteMetaData.fullName,\n        timestamp: new Date(suiteMetaData.startTime),\n        errors: 0,\n        tests: 0,\n        failures: 0,\n        testcases: []\n      };\n      if (options.display === 'full') {\n        grunt.log.write(indent(indentLevel++));\n        grunt.log.writeln(chalk.bold(suiteMetaData.description));\n      }\n    });\n\n    phantomjs.on('jasmine.suiteDone', function(suiteMetaData) {\n      suites[suiteMetaData.id].time = suiteMetaData.duration / 1000;\n\n      if (indentLevel > 1) {\n        indentLevel--;\n      }\n    });\n\n    phantomjs.on('jasmine.specStarted', function(specMetaData) {\n      thisRun.executedSpecs++;\n      thisRun.cleanConsole = true;\n      if (options.display === 'full') {\n        grunt.log.write(indent(indentLevel) + '- ' + chalk.grey(specMetaData.description) + '...');\n      } else if (options.display === 'short') {\n        grunt.log.write(chalk.grey('.'));\n      }\n    });\n\n    phantomjs.on('jasmine.specDone', function(specMetaData) {\n      var specSummary = {\n        assertions: 0,\n        classname: suites[currentSuite].name,\n        name: specMetaData.description,\n        time: specMetaData.duration / 1000,\n        failureMessages: []\n      };\n\n      suites[currentSuite].tests++;\n\n      var color = 'yellow',\n          symbol = 'splat';\n      if (specMetaData.status === 'passed') {\n        thisRun.passedSpecs++;\n        color = 'green';\n        symbol = 'check';\n      } else if (specMetaData.status === 'failed') {\n        thisRun.failedSpecs++;\n        status.failed++;\n        color = 'red';\n        symbol = 'error';\n        suites[currentSuite].failures++;\n        suites[currentSuite].errors += specMetaData.failedExpectations.length;\n        specSummary.failureMessages = specMetaData.failedExpectations.map(function(error) {\n          return error.message;\n        });\n        thisRun.summary.push({\n          suite: suites[currentSuite].name,\n          name: specMetaData.description,\n          errors: specMetaData.failedExpectations.map(function(error) {\n            return {\n              message: error.message,\n              stack: error.stack\n            };\n          })\n        });\n      } else {\n        thisRun.skippedSpecs++;\n      }\n\n      suites[currentSuite].testcases.push(specSummary);\n\n      // If we're writing to a proper terminal, make it fancy.\n      if (process.stdout.clearLine) {\n        if (options.display === 'full') {\n          process.stdout.clearLine();\n          process.stdout.cursorTo(0);\n          grunt.log.writeln(\n            indent(indentLevel) +\n              chalk[color].bold(symbols.full[symbol]) + ' ' +\n              chalk.grey(specMetaData.description)\n          );\n        } else if (options.display === 'short') {\n          process.stdout.moveCursor(-1);\n          grunt.log.write(chalk[color].bold(symbols.short[symbol]));\n        }\n      } else {\n        // If we haven't written out since we've started\n        if (thisRun.cleanConsole) {\n          // then append to the current line.\n          if (options.display !== 'none') {\n            grunt.log.writeln('...' + symbols[options.display][symbol]);\n          }\n        } else {\n          // Otherwise reprint the current spec and status.\n          if (options.display !== 'none') {\n            grunt.log.writeln(\n              indent(indentLevel) + '...' +\n              chalk.grey(specMetaData.description) + '...' +\n              symbols[options.display][symbol]\n            );\n          }\n        }\n      }\n\n      specMetaData.failedExpectations.forEach(function(error, i) {\n        var specIndex = ' (' + (i + 1) + ')';\n        if (options.display === 'full') {\n          grunt.log.writeln(indent(indentLevel + 1) + chalk.red(error.message + specIndex));\n        }\n        phantomjs.emit('onError', error.message, error.stack);\n      });\n\n    });\n\n    phantomjs.on('jasmine.jasmineDone', function() {\n      var dur = (new Date()).getTime() - thisRun.startTime;\n      var specQuantity = thisRun.executedSpecs + (thisRun.executedSpecs === 1 ? ' spec ' : ' specs ');\n\n      grunt.verbose.writeln('Jasmine runner finished');\n\n      if (thisRun.executedSpecs === 0) {\n        // log.error will print the message but not fail the task, warn will do both.\n        var log = options.ignoreEmpty ? grunt.log.error : grunt.warn;\n\n        log('No specs executed, is there a configuration error?');\n      }\n\n      if (options.display === 'short') {\n        grunt.log.writeln();\n      }\n\n      if (options.summary && thisRun.summary.length) {\n        grunt.log.writeln();\n        logSummary(thisRun.summary);\n      }\n\n      if (options.junit && options.junit.path) {\n        writeJunitXml(suites);\n      }\n\n      grunt.log.writeln('\\n' + specQuantity + 'in ' + (dur / 1000) + 's.');\n    });\n\n    function logSummary(tests) {\n      grunt.log.writeln('Summary (' + tests.length + ' tests failed)');\n      _.forEach(tests, function(test) {\n        grunt.log.writeln(chalk.red(symbols[options.display].error) + ' ' + test.suite + ' ' + test.name);\n        _.forEach(test.errors, function(error) {\n          grunt.log.writeln(indent(2) + chalk.red(error.message));\n          logStack(error.stack, 2);\n        });\n      });\n    }\n\n    function logStack(stack, indentLevel) {\n      var lines = (stack || '').split('\\n');\n      for (var i = 0; i < lines.length && i < 11; i++) {\n        grunt.log.writeln(indent(indentLevel) + lines[i]);\n      }\n    }\n\n    function writeJunitXml(testsuites) {\n      var template = grunt.file.read(options.junit.template || junitTemplate);\n      if (options.junit.consolidate) {\n        var xmlFile = path.join(options.junit.path, 'TEST-' + testsuites.suite1.name.replace(/[^\\w]/g, '') + '.xml');\n        grunt.file.write(xmlFile, _.template(template, { testsuites: _.values(testsuites) }));\n      } else {\n        _.forEach(testsuites, function(suiteData) {\n          var xmlFile = path.join(options.junit.path, 'TEST-' + suiteData.name.replace(/[^\\w]/g, '') + '.xml');\n          grunt.file.write(xmlFile, _.template(template, { testsuites: [suiteData] }));\n        });\n      }\n    }\n\n    phantomjs.on('jasmine.done', function() {\n      phantomjs.halt();\n    });\n\n    phantomjs.on('jasmine.done.PhantomReporter', function() {\n      phantomjs.emit('jasmine.done');\n    });\n\n    phantomjs.on('jasmine.done_fail', function(url) {\n      grunt.log.error();\n      grunt.warn('PhantomJS unable to load \"' + url + '\" URI.', 90);\n    });\n  }\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-contrib-jasmine/node_modules/grunt-contrib-jasmine/tasks/lib/jasmine.js":"'use strict';\n\nexports.init = function(grunt, phantomjs) {\n  // node api\n  var fs = require('fs'),\n      path = require('path');\n\n  // npm\n  var rimraf = require('rimraf'),\n      _ = require('lodash'),\n      jasmineRequire = require('jasmine-core');\n\n  var baseDir = '.';\n\n  var exports = {};\n\n  exports.writeTempFile = function(dest, contents) {\n    grunt.file.write(dest, contents);\n  };\n\n  exports.copyTempFile = function(src, dest) {\n    grunt.file.copy(src, dest);\n  };\n\n  exports.cleanTemp = function(tempDir, cb) {\n    rimraf(tempDir, function() {\n      if(tempDir === '.grunt/grunt-contrib-jasmine') {\n        // if this fails, then ./.grunt isn't empty and that's ok.\n        fs.rmdir('.grunt', cb);\n      } else {\n        // don't delete parent directory of a custom directory.\n        cb();\n      }\n    });\n  };\n\n  exports.buildSpecrunner = function(src, options) {\n    var source = '',\n      tempDir = options.tempDir,\n      outfile = options.outfile,\n      specrunner = path.join(baseDir, outfile),\n      outdir = path.dirname(outfile),\n      gruntfilter = grunt.option('filter'),\n      filteredSpecs = exports.getRelativeFileList(outdir, options.specs);\n\n    // Let's filter through the spec files here,\n    // there's no need to go on if no specs matches\n    if (gruntfilter) {\n      filteredSpecs = specFilter(gruntfilter, filteredSpecs);\n\n      if (filteredSpecs.length === 0) {\n        grunt.log.warn('the --filter flag did not match any spec within ' + grunt.task.current.target);\n        return null;\n      }\n    }\n\n    exports.copyTempFile(path.join(__dirname, '/../jasmine/reporters/PhantomReporter.js'), path.join(tempDir, 'reporter.js'));\n\n    [].concat(jasmineRequire.files.cssFiles, jasmineRequire.files.jsFiles).forEach(function(name) {\n      var srcPath = path.join(jasmineRequire.files.path, name);\n      exports.copyTempFile(srcPath, path.join(tempDir, name));\n    });\n\n    jasmineRequire.files.bootFiles.forEach(function(name) {\n      var srcPath = path.join(jasmineRequire.files.bootDir, name);\n      exports.copyTempFile(srcPath, path.join(tempDir, name));\n    });\n\n    exports.copyTempFile(path.join(jasmineRequire.files.imagesDir, 'jasmine_favicon.png'), path.join(tempDir, 'jasmine_favicon.png'));\n\n    var reporters = [\n      tempDir + '/reporter.js'\n    ];\n\n    var jasmineCss = jasmineRequire.files.cssFiles.map(function(name) {\n      return path.join(tempDir, name);\n    });\n\n    jasmineCss = jasmineCss.concat(options.styles);\n\n    var polyfills = [].concat(options.polyfills);\n\n    var jasmineCore = jasmineRequire.files.jsFiles.map(function(name) {\n      return path.join(tempDir, name);\n    });\n\n    var bootFile = tempDir + '/boot.js';\n\n    if (options.customBootFile !== null) {\n      bootFile = options.customBootFile;\n    }\n\n    var context = {\n      temp: tempDir,\n      outfile: outfile,\n      favicon: path.join(tempDir, 'jasmine_favicon.png'),\n      css: exports.getRelativeFileList(outdir, jasmineCss, { nonull: true }),\n      scripts: {\n        polyfills: exports.getRelativeFileList(outdir, polyfills),\n        jasmine: exports.getRelativeFileList(outdir, jasmineCore),\n        helpers: exports.getRelativeFileList(outdir, options.helpers, { nonull: true }),\n        specs: filteredSpecs,\n        src: exports.getRelativeFileList(outdir, src, { nonull: true }),\n        vendor: exports.getRelativeFileList(outdir, options.vendor, { nonull: true }),\n        reporters: exports.getRelativeFileList(outdir, reporters),\n        boot: exports.getRelativeFileList(outdir, bootFile)\n      },\n      options: options.templateOptions || {}\n    };\n\n    if (options.template.process) {\n      var task = {\n        writeTempFile: exports.writeTempFile,\n        copyTempFile: exports.copyTempFile,\n        phantomjs: phantomjs\n      };\n      source = options.template.process(grunt, task, context);\n      grunt.file.write(specrunner, source);\n    } else {\n      grunt.file.copy(options.template, specrunner, {\n        process: function(src) {\n          source = _.template(src, context);\n          return source;\n        }\n      });\n    }\n\n    return source;\n  };\n\n  exports.getRelativeFileList = function(outdir, patterns, options) {\n    patterns = patterns instanceof Array ? patterns : [ patterns ];\n    options = options || {};\n\n    var files = grunt.file.expand(options, _.compact(patterns)).map(function(file) {\n      return (/^https?:/).test(file) ? file : path.relative(outdir, file).replace(/\\\\/g, '/');\n    });\n    return files;\n  };\n\n  // Allows for a spec file to be specified via the command line\n  function specFilter(pattern, files) {\n    var specPattern,\n      patternArray,\n      filteredArray = [],\n      scriptSpecs = [],\n      matchPath = function(path) {\n        return !!path.match(specPattern);\n      };\n\n    if (pattern) {\n      // For '*' to work as a wildcard.\n      pattern = pattern.split('*').join('[\\\\S]*').replace(/\\./g, '\\\\.');\n      // This allows for comma separated strings to which we can match the spec files.\n      patternArray = pattern.split(',');\n\n      while (patternArray.length > 0) {\n        pattern = patternArray.splice(0, 1)[0];\n\n        if (pattern.length > 0) {\n          if (pattern.indexOf('/') === -1) {\n            specPattern = new RegExp('(' + pattern + '[^/]*)(?!/)$', 'ig');\n          } else if (pattern.indexOf('/') === 0) {\n            specPattern = new RegExp('(' + pattern + '[^/]*)(?=/)', 'ig');\n          } else {\n            throw new TypeError('--filter flag seems to be in the wrong format.');\n          }\n\n          // push is usually faster than concat.\n          [].push.apply(scriptSpecs, files.filter(matchPath));\n        }\n      }\n\n      filteredArray = _.uniq(scriptSpecs);\n    }\n\n    return filteredArray;\n  }\n\n  return exports;\n};\n"}